@import "../../../../assets/css/vars.less";

@cCm1 : lighten(@cSuccess1, 3%); // background cm
@cCm2 : lighten(@cSuccess1, 7%); // selected cm
@cCm3 : darken(@cSuccess1,8%); // color meta / background gunter
@cCm4 : @cSuccess2; // color link bread
@cCmShadow : @cSuccess2; // color link bread

@elem: 8,20;

@radius: 80;
@size : 48;
@borderSize: 6;
@shadowSize : 48;
@unit : px;

@sizeAngle: @radius - (@size/2);

@startTop: -0.5*pi();
@startTopRight: -0.25*pi();
@startTopLeft: -0.75*pi();
@startBottomRight: 0.25*pi();
@startBottomLeft: 0.75*pi();
@startLeft: pi();
@startRight: 2*pi();
@startBottom: 0.5*pi();


// @colorRef : #253138;
@colorRef : @cCm3;



@circleColor : @colorRef;

@shadowColor : fade(lighten(@colorRef, 2%),98%);

@aColor : @clink2;
@aColorHover : lighten(@cPrimary1,15%);

@start:  @startTop,@startBottom;

/* nb Elem  */
.animate(@time:125ms){
	-webkit-transition: all @time cubic-bezier(0.68, -0.55, 0.265, 1.55);
	-moz-transition: all @time cubic-bezier(0.68, -0.55, 0.265, 1.55);
	-ms-transition: all @time cubic-bezier(0.68, -0.55, 0.265, 1.55);
	-o-transition: all @time cubic-bezier(0.68, -0.55, 0.265, 1.55);
	transition: all @time cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

.shadow(@size){
	-webkit-box-shadow: 0 0 0 unit(@shadowSize, @unit) lighten(@shadowColor,1%);
	box-shadow: 0 0 0 unit(@shadowSize, @unit) lighten(@shadowColor,1%);
}

.translate(@tX,@tY,@scale:1){
	-moz-transform: translateX(unit(@tX, @unit)) translateY(unit(@tY, @unit)) scale(@scale);
	-webkit-transform: translateX(unit(@tX, @unit)) translateY(unit(@tY, @unit)) scale(@scale);
	-o-transform: translateX(unit(@tX, @unit)) translateY(unit(@tY, @unit)) scale(@scale);
	-ms-transform: translateX(unit(@tX, @unit)) translateY(unit(@tY, @unit)) scale(@scale);
	transform: translateX(unit(@tX, @unit)) translateY(unit(@tY, @unit)) scale(@scale);
}

.scale(@scale:1){
	-moz-transform: scale(@scale);
	-webkit-transform: scale(@scale);
	-o-transform: scale(@scale);
	-ms-transform: scale(@scale);
	transform: scale(@scale);
}

.circle{
	position: fixed;
	z-index: 1998;
	border-radius: 50%;

	width: unit(@radius*2, @unit);
	height: unit(@radius*2, @unit);

	margin-left: unit(0-@radius, @unit);
	margin-top: unit(0-@radius, @unit);



	a {
		color:@aColor !important;
	}
	display:none !important;
	&.open {
		display:block !important;
		& .circle-center{
			.animate(255ms);
			.scale(1);
			.shadow(@size);
			border: unit(@shadowSize, @unit) solid @shadowColor !important;
		}
		& .elem{
			.animate(255ms);

			color:@aColor;
				a{
					text-decoration: none;
					display: inline-block;
					outline: none;
					line-height: unit(@size, @unit);
					width: unit(@size, @unit);
					&,
					i{
						color:@aColor !important;
					}

					.animate(125ms);
					&:hover{
						&,
						i{
							color:@aColorHover !important;
						}

					}
				}
		}
	}

	& .elem{
		.animate(125ms);
		width: unit(@size, @unit);
		height: unit(@size, @unit);
		line-height: unit(@size, @unit);
		vertical-align: middle;
		text-align: center;
		position: absolute;

		color: #fff;
		z-index: 901;
	}

	& .circle-center{
		.animate(125ms);
		.scale(0);
		.shadow(0);
		background-color: @circleColor;
		width: unit(@radius*2, @unit);
		line-height: unit(@size + 10, @unit);
		text-align: center;
		font-size: unit(@radius/4, @unit);
		vertical-align: middle;
		height: unit(@radius*2, @unit);
		border-radius: 50%;
		position: absolute;
		display: inline-block;
		z-index: 900;
		& a{
			text-decoration: none;
			&,
			i{
				color:@aColor !important;
			}
		}
	}
}

/* Elem */

.mixin-loop (@i, @y) when (@i > 0) {
	@step: 2*pi()/extract(@elem, @y);
	@ref:(0-@size/2) + @radius + @size * (@y - 1);
	@circleStart: extract(@start, @y);

	.circle .circle-@{y}.pos-@{i} {
		@center:(@radius - (@size / 2) );
		.translate(@center,@center,0.8);
	}

	.circle.open .circle-@{y}.pos-@{i}{
		@top:ceil(@ref * sin(@angle)+@sizeAngle);
		@left:ceil(@ref * cos(@angle)+@sizeAngle);

		.translate(@left,@top);

		@angle: (@step * @i) + @circleStart - @step ;
	}

	.mixin-loop(@i - 1,@y);
}

.circle-loop (@y:1) when (@y <= length(@elem)){
	@val:extract(@elem, @y);
	.mixin-loop(@val, @y);
	.circle-loop (@y + 1);
}
.circle-loop ();

